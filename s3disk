#!/usr/bin/python

import sys, os, argparse

from s3sysex.S3FileReader import S3FileReader
from s3sysex.S3Turbo import S3Exception

parser = argparse.ArgumentParser(description='Process GEM S2/S3 image files')
parser.add_argument('files', type=str, nargs='+',
                   help='input files')
parser.add_argument('--compatible', action='store_true',
                    help='treat some errors as warnings')
parser.add_argument('-c', '--contents', action='store_true',
                    help='dump list of image contents')
parser.add_argument('-d', '--dumpfile', metavar='FILE', type=str,
                    help='dump FILE to stdout')
parser.add_argument('-e', '--extract', metavar='DIR', type=str,
                    help='extract image to DIR')
parser.add_argument('-f', '--fat', action='store_true',
                    help='dump FAT of image file')
parser.add_argument('-l', '--log', metavar='FILE', type=str, nargs='?',
                    const='log.txt',
                    help='log problematic files to FILE')
parser.add_argument('-p', '--props', action='store_true',
                    help='dump image file properties')
parser.add_argument('-v', '--verbose', action='store_true',
                    help='print debugging information')

args = parser.parse_args()

if args.log: logfile = open(args.log,"w")

exitstatus = 0
for fn in args.files:
    if not os.path.exists(fn):
        print "Could not open file '%s'" % fn
        continue
    try:
        actionTaken = False
        sf = S3FileReader(fn,compatible=args.compatible,debug=args.verbose)
        if args.dumpfile:
            f = sf.findFile(args.dumpfile)
            if not f:
                print "Could not find '%s'" % args.dumpfile
                continue
            buf = sf.readFile(f)
            sys.stdout.write(buf)
            actionTaken = True
        if args.contents:
            sf.printContents()
            actionTaken = True
        if args.props:
            sf.dumpProps()
            actionTaken = True
        if args.fat:
            sf.dumpFAT()
            actionTaken = True
        if args.extract:
            sf.extractAll(args.extract)
            actionTaken = True
        if not actionTaken:
            sf.printContents()
    except IOError, e:
        if errno == 32: break
        else: raise
    except Exception, e:
        print >> sys.stderr, fn
        print >> sys.stderr, " ERROR:", e
        if args.log:
            print >> logfile, fn
        else:
            exitstatus = 1
            break

# close stdout and stderr manually in order to avoid error messages when piping
sys.stderr.close()
sys.stdout.close()
sys.exit(exitstatus)
